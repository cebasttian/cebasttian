# -*- coding: utf-8 -*-
"""Tarea 1 Probabilidad y estadistica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJlSDZdcU6Ee8xNZjypRDgptCuSgb4zv

Se instalan las librerias necesarias
"""

"""
!pip3 install numpy
!pip3 install statistics
!pip3 install matplotlib
!pip3 install scipy
!pip3 install colorama
!pip3 install tabulate
"""
#NOTA: Esta comentado para que no falle la ejecucion, es necesario instalar las librerias

"""Se importan las librerias"""

# Commented out IPython magic to ensure Python compatibility.
#%matplotlib notebook *no funciona pero deberia* ðŸ¤”ðŸ¤”
# %matplotlib inline 
import numpy as np #importando numpy
import statistics as sts #Importando statistics
import matplotlib.pyplot as plt #importando matplotlib
from scipy import stats #importando scipy.stats
from colorama import Fore, Style #Importando colorama.Fore y colorama.Style
from tabulate import tabulate #Importando Tabulate

"""Funciones que se utilizaran para los calculos"""

#Valor Minimo
def Valor_Minimo(Datos):
  return min(Datos)

#Valor Maximo
def Valor_Maximo(Datos):
  return max(Datos)

#Rango
def Rango(Datos):
  return f"{(Valor_Maximo(Datos)-Valor_Minimo(Datos)):.2f}"

#Media
def Media(Datos):
  return f"{np.mean(Datos):.2f}"

#Moda
def Moda(Datos):
  return stats.mode(Datos)[0][0]

#Mediana
def Mediana(Datos):
  return f"{sts.median(Datos):.2f}"

#Varianza
def Varianza(Datos):
  X = float(Media(Datos))
  N = len(Datos)
  Aux = 0
  for x in Datos:
    Aux += (x - X)**2
  return (Aux/N)

#Desviacion estandar
def Desviacion_Estandar(Datos):
  return (Varianza(Datos)**0.5)

"""Funcion para mostrar datos en pantalla ordenados"""

def Ver_Matriz(Datos):
  Datos.sort()
  Matriz = []
  Aux = []
  for i in range(len(Datos)):
    if Datos[i] == Valor_Minimo(Datos):
      Aux2 = Fore.BLUE + str(Datos[i]) + Style.RESET_ALL
    elif Datos[i] == Valor_Maximo(Datos):
      Aux2 = Fore.RED + str(Datos[i]) + Style.RESET_ALL
    elif Datos[i] == Moda(Datos):
      Aux2 = Fore.GREEN + str(Datos[i]) + Style.RESET_ALL
    elif i == 49 or i == 50:
      Aux2 = Fore.YELLOW + str(Datos[i]) + Style.RESET_ALL
    else:
      Aux2 = Style.RESET_ALL + str(Datos[i])

    if (i + 1) % 10 == 0:
      Aux += [Aux2]
      Matriz += [Aux]
      Aux = []
    else:
      Aux += [Aux2]
  print(tabulate(Matriz, tablefmt = "pretty"))

"""Funcion para crear tabla de frecuencias"""

def Ver_Tabla(Datos):
  Tabla = [["Intervalo", "Frecuencia Absoluta (fi)", "Frecuencia Acumulada (Fi)"]]
  Aux = {"[160-165)":0, "[165-170)":0,"[170-175)":0, "[175-180)":0,"[180-185)":0, "[185-190)":0,"[190-195)":0, "[195-200]":0}
  for elem in Datos:
    if   160 <= elem < 165:
      Aux["[160-165)"] += 1
    elif 165 <= elem < 170:
      Aux["[165-170)"] += 1
    elif 170 <= elem < 175:
      Aux["[170-175)"] += 1
    elif 175 <= elem < 180:
      Aux["[175-180)"] += 1
    elif 180 <= elem < 185:
      Aux["[180-185)"] += 1
    elif 185 <= elem < 190:
      Aux["[185-190)"] += 1
    elif 190 <= elem < 195:
      Aux["[190-195)"] += 1
    elif 195 <= elem < 200:
      Aux["[195-200]"] += 1
  Aux2 = Aux.items()
  Alm = 0
  for k, v in Aux2:
    Alm += v
    Tabla += [[k, v, Alm]]
  print(tabulate(Tabla, headers = "firstrow", tablefmt = "pretty"))

"""Funcion para crear histograma"""

def Ver_Histograma(Datos):
  Histograma = plt.hist(Datos, bins=[160, 165, 170, 175, 180, 185, 190, 195, 200])
  Histograma = plt.axis([160, 200, 7, 18])
  Histograma = plt.xlabel("Altura")
  Histograma = plt.ylabel("Frecuencia")
  Histograma = plt.title("Histograma");

"""Tabla de datos"""

Datos =  [187.65, 168.81, 191.85, 194.7,  183.3,  162.83, 172.43, 170.2,  198.11, 171.81] 
Datos += [177.87, 180.83, 164.51, 199.74, 195.3,  176.74, 164.05, 165.27, 177.87, 168.89] 
Datos += [194.31, 165.26, 185.33, 172.3,  162.59, 187.14, 168.47, 180.24, 175.36, 179.09] 
Datos += [178.51, 189.54, 187.38, 166.52, 170.94, 184.58, 173.59, 196.17, 197.32, 165.48] 
Datos += [197.98, 178.2,  160.09, 192.01, 161.87, 199.04, 197.77, 179.14, 167.14, 191.22] 
Datos += [177.84, 165.17, 168.38, 160.2,  182.16, 191.9,  173.19, 171.58, 160.01, 167.79] 
Datos += [165.17, 171.46, 196.01, 167.88, 188.3,  169.51, 185.06, 168.29, 172.92, 185.56]
Datos += [185.53, 174.27, 185.11, 172.85, 190.13, 165.32, 179.29, 173.21, 191.71, 197.82]
Datos += [183.24, 162.33, 180.45, 199.17, 169.07, 189.77, 188.99, 184.7,  192.72, 177.41]
Datos += [179.59, 192.17, 195.47, 162.77, 178.78, 198.87, 194.24, 175.88, 191.08, 194.52]

"""Mostrar matriz en pantalla"""

Ver_Matriz(Datos)

"""Mostrar Estadigrafos"""

print(Style.RESET_ALL + "Valor Minimo: " + Fore.BLUE   + str(Valor_Minimo(Datos)) + "\n")
print(Style.RESET_ALL + "Valor Maximo: " + Fore.RED    + str(Valor_Maximo(Datos)) + "\n")
print(Style.RESET_ALL + "Rango: "        +               str(Rango(Datos))        + "\n")
print(Style.RESET_ALL + "Media: "        +               str(Media(Datos))        + "\n")
print(Style.RESET_ALL + "Moda: "         + Fore.GREEN  + str(Moda(Datos))         + "\n")
print(Style.RESET_ALL + "Mediana: "      + Fore.YELLOW + str(Mediana(Datos))      + "\n")
print(Style.RESET_ALL + "Varianza: "     +               str(Varianza(Datos))     + "\n")
print(Style.RESET_ALL + "Desviacion Estandar: "        + str(Desviacion_Estandar(Datos)))

"""Mostrar Histograma"""

Ver_Histograma(Datos)

"""Tabla de frecuencia"""

Ver_Tabla(Datos)

"""https://relopezbriega.github.io/blog/2015/06/27/probabilidad-y-estadistica-con-python/

https://recursospython.com/guias-y-manuales/colorama-texto-fondo-coloreados-la-consola/

https://pypi.org/project/tabulate/
"""